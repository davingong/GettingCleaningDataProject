class(y)
y["21231"]
y[y=="21231"]
nrow(y[y=="21231"])
dim(y[y=="21231"])
z<-y[y=="21231"]
z
nrow(z)
ncol(z)
class(z)
z<-as.vector(z)
z
nrow(z)
ncol(z)
NCOL(z)
NROW(z)
install.packages("data.table")
library(data.table)
rm(list=list.files())
rm(list=list.files)
ls(list = ls())
rm(list=ls())
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
?fread
download.file(fileUrl, "./quest5.csv")
DT <- fread("quest5.csv")
DT[, mean(pwgtp15), by=SEX]
library(xlsx)
# if (!file.exists("data")) {
#      dir.create("data")
# }
fileXLS <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
# use mode = "wb" forces binary mode - doesn't read correctly without this!
download.file(fileXLS,destfile="NGAP.xlsx", mode = "wb")
dateDownloadedXLS <- date() # if you want to store the date of download
colIndex <- 7:15
rowIndex <- 18:23
dat <- read.xlsx("NGAP.xlsx",sheetIndex=1, colIndex = colIndex, rowIndex = rowIndex) #select first sheet, specific col/rows.
sum(dat$Zip*dat$Ext,na.rm=T) # code lesson gives your to run
dat
?read_excel
?read.xlsx
?read_excel
install.packages("RmySQL")
install.packages("RMySQL")
library(RMySQL)
install.packages("httr")
library(httr)
html2 <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
content2 <- content(html2, as = "text")
parsedhtml <- htmlParse(content2, as= "text")
parsedhtml <- htmlParse(content2, asText = TRUE)
head(parsedhtml)
parsedhtml
names(parsedhtml)
parsedhtml[1]
rootNode <- xmlRoot(parsedhtml)
rootNode
names(rootNode)
rootNode[1]
rootNode[1][2]
rootNode[2][1]
xmlSApply(rootNode, xmlValue)
xpathSApply(rootNode, "//body," xValue)
xpathSApply(rootNode, "//body," xmlValue)
names(rootNode)
rootNode[[1]]
rootNode[[2]]
parsedhtml
code <- readLines("http://biostat.jhsph.edu/~jleek/contact.html")
code
code[c(10,20,30,100)]
nchar(code[c(10,20,30,100)])
rm(list=ls())
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(url, "noaa.for")
df <- read.fwf("noaa.for")
?read,fwf
?read.fwf
df <- read.fwf("noaa.for", 9)
df
df <- read.fwf("noaa.for", 1)
df
df <- read.fwf("noaa.for", 2)
df <- read.fwf("noaa.for", 3)
df <- read.fwf("noaa.for", 90)
df <- read.fwf("noaa.for", 1)
df <- read.fwf("noaa.for", c(1,1,1,1,1,1,1,1,1)
df
df <- read.fwf("noaa.for", c(1,1,1,1,1,1,1,1,1)
)
df
df <- read.fwf("noaa.for", c(9,3,2,3,2,3,2,3,2)
df
df
df <- read.fwf("noaa.for", c(9,3,2,3,2,3,2,3,2))
df
head(df)
df <- read.fwf("noaa.for", c(-1,9,-5,4,-1,3,-5,4,-1,3,-5,4,-1,3,-5,4,-1,3))
df
sum(df[,4])
sum(df[4])
df[,4]
df <- read.fwf("noaa.for", skip = 4, c(-1,9,-5,4,-1,3,-5,4,-1,3,-5,4,-1,3,-5,4,-1,3))
df
sum(df[,4])
chicago <- readRDS(chicago.RDS)
chicago <- readRDS(chicago.rds)
library(datasets)
chicago <- readRDS(chicago.rds)
iris <- data("iris")
head(iris)
iris
data("iris")
data(mtcars)
mtcars <- data(mtcars)
mtcars
?data
data()
data(mtcars)
mtcars
mtcars[, c("mpg","cyl")]
mtcars[, -c("mpg","cyl")]
swirl()
library(swirl)
rm(list=ls())
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cram <= tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select9cran, r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
tbl_df
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, desc(ip_id)
arrangge(cran2, package, ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), desc(ip_id))
arrange(cran2, country, desc(r_version), (ip_id))
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, cran:ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(packsum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counnts_sorted <- arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique()))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>% select(ip_id, country, package, size)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather()
?gather
gather(students, sex, count, -grade)
swirl()
play()
gather(students, count, sex, -grade)
nxt()
students2
rest(students2, sex_class, value)
res <- gather(students2, sex_class, value)
res <- gather(students2, sex_class, value, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
reset()
swirl()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
?mutate
submit()
play()
mutate(students3, class = parse_number(class))
mutate(students3, class = parse_number(students3, 2))
parse_number(stduents3, class)
parse_number(studunts3, class)
parse_number(students3, class)
parse_number(students3, students3$class)
students3
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class = parse_number(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(parse_number(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class = parse_number(class))
submit()
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status)
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, "idaho.csv")
idaho <- read.csv("idaho.csv")
head(idaho)
df<-idaho
agricultureLogical <- df$AGS == 6 & df$ACR ==3
which(agricultureLogical
)
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
install.packages("jpeg)
install.packages("jpeg")
library(jpeg)
download.file(fileUrl2, "jtleek,jpg")
download.file(fileUrl2, "jtleek.jpg")
jeff <- readJPEG("jtleek.jpg")
jeff
names(jeff)
summary(jef)
summary(jeff)
str(jeff)
?quantile
?readJPEG
jeff <- readJPEG("jtleek.jpg", native = TRUE)
?quantile
quantile(jeff, probs = c(0.3, 0.8))
download.file(fileUrl2, "jtleek.jpg", mode = "wb")
jeff <- readJPEG("jtleek.jpg", native = TRUE)
quantile(jeff, probs = c(0.3, 0.8))
fileUrlGDP <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileUrlStats <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file("fileUrlGDP", "GDP.csv")
download.file(fileUrlGDP, "GDP.csv")
download.file(fileUrlStats, "stats.csv")
gdp <- read.csv("gdp.csv")
stats <- read.csv("stats.csv")
names(gdp); names(stats)
head(gdp)
View(gdp)
View(stats)
?match
gdp$X %in% stats$CountryCode
sum(gdp$X %in% stats$CountryCode)
View(gdp)
View(gdp)
merge(gdp, stats, by.x = gdp$X, by.y = stats$CountryCode)
?merge
?merge
merge(gdp, stats, by.x = gdp$X, by.y = stats$CountryCode, all = TRUE)
gdp$X
View(gdp)
gdp <- read.csv("gdp.csv", skip = 4)
gdp
tail(gdp)
gdp<-filter(gdp, !X=="")
gdp
tail(gdp)
merge(gdp, stats, by.x = gdp$X, by.y = stats$CountryCode)
sum(gdp$X %in% stats$CountryCode)
View(gdp)
?read.csv
gdp <- read.csv("gdp.csv", skip = 4, nrows=190)
sum(gdp$X %in% stats$CountryCode)
mergeddata<-merge(gdp, stats, by.x = "X", by.y = "CountryCode")
mergeddata
mergeddata %>% arrange(X) %>% filter(13)
mergeddata %>% arrange(X)
View(gdp)
head(mergeddata)
View(mergeddata)
mergeddata %>% arrange(X.4)%>% [13,1]
mergeddata %>% arrange(X.4)%>% mergeddata[13,1]
f<-mergeddata %>% arrange(X.4)
f[13,1]
f[13,4]
str(mergedata)
str(mergeddata)
mergeddata$X.4 <- as.numeric(mergeddata$X.4)
f<-mergeddata %>% arrange(X.4)
f[13,4]
mergeddata$X.4 <- as.numeric(mergeddata$X.4)
str(mergeddata)
z<-mergeddata %>% arrange(X.4)
z[13,4]
x<- arrange(mergeddata,X.4)
View(x)
View(gdp)
View(mergeddata)
mergeddata2<-merge(gdp, stats, by.x = "X", by.y = "CountryCode")
View(mergeddata2)
str(mergeddata2)
mergeddata2$X.4<-as.character(mergeddata2$X.4)
View(mergeddata2)
mergeddata2$X.4<-as.numeric(mergeddata2$X.4)
arrange(gdp, X.4)
gdp2 <-arrange(gdp, X.4)
gdp2[13]
gdp2[13,1]
gdp$X.4<-as.numeric(as.character(gdp$X.4))
View(gdp2)
View(gdp)
View(gdp2)
gdp2$X.4<- as.numeric(levels(gdp2$X.4))[gdp2$X.4]
gdp <- read.csv("gdp.csv", skip = 4, nrows=190)
gdp <- read.csv("gdp.csv", skip = 4, nrows=190, stringsAsFactors = FALSE)
gdp2$X.4<- as.numeric(gdp2$X.4)
gdp$X.4<- as.numeric(gdp$X.4)
View(gdp)
gdp <- read.csv("gdp.csv", skip = 4, nrows=190, stringsAsFactors = FALSE)
gdp$X.4 <- extract_numeric(gdp, gdp$X.4)
?extract_numeric
parse_number(gdp$X.4)
gdp$X.4 <- parse_number(gdp$X.4)
gdp2 <-arrange(gdp, X.4)
gdp2[13,1]
gdp2[13,4]
View(gdp2)
View(gdp2)
View(mergeddata2)
mergeddata3<-merge(gdp2, stats, by.x = "X", by.y = "CountryCode")
View(mergeddata3)
mergeddata3 <- group_by(mergeddata3, Income.Group)
summarize(mergeddata3, mean(X.1))
?cut
cut(mergeddata3, 5)
summarize(mergeddata3, quantile)
summarize(mergeddata3, quantile(X.1))
summarize(mergeddata3, quantile(X.1, probs = (0.5, 0.7)))
summarize(mergeddata3, quantile(X.1, probs = (0.5)))
summarize(mergeddata3, quantile(X.1, probs = seq(0:1, 5))
)
summarize(mergeddata3, quantile(X.1, probs = seq(0:1, 5)))
seq(0:1, 5)
seq(1:5)
seq_along(5)
seq_along(1:5)
?seq
seq(0, 1, length.out = 5)
summarize(mergeddata3, quantile(X.1, probs = seq(0, 1, length.out = 5))
)
summarize(mergeddata3, quantile(X.1, probs = seq(0, 1, length.out = 5)))
summarize(mergeddata3, quantile(X.1, probs = c(0, 0.25))
)
summarize(mergeddata3, quantile(X.1, probs = 0.25)
)
summarize(mergeddata3, quantile(X.1, probs = 0.25), mean(X.1))
cut(mergeddata3)
cut(mergeddata3$X.4)
cut(mergeddata3$X.4, break = 5)
?cut
cut(mergeddata3$X.4, breaks = 5)
cut(mergeddata3$X.1, breaks = 5)
q <- (mergeddata3$X.1, breaks = 5)
q<- cut(mergeddata3$X.1, breaks = 5)
q
table(mergeddata3$Income.Group, q)
list1 <- list(c(1,2,3), c(7,8,9))
list1[1]
list1[[1]]
list1[[1,1]]
list1[[1]][2]
list1[1][2]
list1 <- list(fork = c(1,2,3), spoon = c(7,8,9))
list1$fork[1]
df<-data.frame(c(1,2,3,4))
df
df<-data.frame(horse =c(1,2,3,4), cat = c(7,56,6,7))
df
df[,"cat"]
cat+2
df+2
mean(df)
lapply(df, mean)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
ymd("1998-05-17")
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy(March 12, 1985)
mdy("March 12, 1985")
mdy("March 12, 1975")
dmy(25081975)
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
hms(dt2)
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, now())
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0
)
this_moment
nyc <- now(tzon = "America/New York")
nyc <- now(tzone = "America/New York")
nyc <- now("America/New York")
nyc <- now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
setwd("/.UCI HAR Dataset/test")
getwd()
setwd("./UCI HAR Dataset/test")
